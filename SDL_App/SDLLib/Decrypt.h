#pragma once
#include <iostream>
#include <string>
#include <cstdio>
#include <algorithm>
#include <random>

class Decryption
{
	static char* read_whole_file(const std::string& src_file, int& total_size)
	{
#ifdef _MSC_VER
		FILE *f = NULL;
		fopen_s(&f, src_file.c_str(), "rb");
#else
		FILE* f = fopen(src_file.c_str(), "rb");
#endif
		if (!f)
			return NULL;

		fseek(f, 0, SEEK_END);
		total_size = ftell(f);
		fseek(f, 0, SEEK_SET);  //same as rewind(f);

		char *arr = new char[total_size];
		fread(arr, total_size, 1, f);
		fclose(f);

		return arr;
	}

	static bool write_whole_file(const std::string& dest_file, const char* arr, const int total_size)
	{
#ifdef _MSC_VER
		FILE *f = NULL;
		fopen_s(&f, dest_file.c_str(), "wb");
#else
		FILE *f = fopen(dest_file.c_str(), "wb");
#endif
		if (!f)
			return false;

		fwrite(arr, total_size, 1, f);
		fflush(f);
		fclose(f);

		return true;
	}
public:
	static bool decrypt_file(const std::string& src_file, const std::string& dest_file)
	{
		static const int MAX_NUM = 128;

		static const char decrypt_key[] = {
			0x21, 0x72, 0x44, 0x6d, 0x6b, 0x37, 0x3d, 0x56,
			0x9,  0x20, 0x17, 0x2e, 0xc,  0xb,  0x7b, 0x70,
			0x15, 0x19, 0x69, 0x24, 0x59, 0xf,  0x28, 0x66,
			0x10, 0x76, 0x6a, 0x4,  0x6c, 0x54, 0x1d, 0x49,
			0x2d, 0x5a, 0x51, 0x4f, 0x5c, 0x42, 0x53, 0x40,
			0x63, 0x4c, 0x30, 0x1e, 0x12, 0x13, 0x3,  0x71,
			0x79, 0x23, 0x35, 0x3a, 0x48, 0x7e, 0xd,  0x27,
			0x7f, 0x3c, 0x62, 0x25, 0x73, 0x43, 0x7d, 0x64,
			0x38, 0x16, 0x6f, 0x45, 0x65, 0x2,  0x7c, 0x18,
			0x14, 0x4d, 0x8,  0x2f, 0x1f, 0x77, 0x5,  0x75,
			0x22, 0x4b, 0x68, 0x60, 0x78, 0x39, 0x57, 0x61,
			0x7,  0x36, 0x29, 0x26, 0x3e, 0x3b, 0x1c, 0x6,
			0x1,  0x41, 0x5b, 0x31, 0xa,  0x11, 0x4e, 0x46,
			0x34, 0x4a, 0x6e, 0x32, 0x2a, 0x33, 0x7a, 0x0,
			0x3f, 0x1a, 0x50, 0x67, 0xe,  0x5e, 0x2b, 0x58,
			0x74, 0x1b, 0x55, 0x5f, 0x2c, 0x5d, 0x52, 0x47 };

		int total_size = 0;
		char* arr = read_whole_file(src_file, total_size);
		if (!arr)
			return false;

		for (int i = 0; i<total_size; ++i)
		{
			arr[i] = decrypt_key[arr[i]];
		}

		bool ret = write_whole_file(dest_file, arr, total_size);

		delete[] arr;

		return ret;
	}
};

